--- a/type_traits	2023-09-10 12:39:22.000000000 -0700
+++ b/type_traits	2023-10-14 20:17:01.679459750 -0700
@@ -1411,7 +1411,7 @@
     : public integral_constant<bool, __is_base_of(_Base, _Derived)>
     { };
 
-#if __has_builtin(__is_convertible)
+#if !defined(NVCC) && __has_builtin(__is_convertible)
   template<typename _From, typename _To>
     struct is_convertible
     : public __bool_constant<__is_convertible(_From, _To)>
@@ -1606,7 +1606,7 @@
   // Reference transformations.
 
   /// remove_reference
-#if __has_builtin(__remove_reference)
+#if !defined(NVCC) && __has_builtin(__remove_reference)
   template<typename _Tp>
     struct remove_reference
     { using type = __remove_reference(_Tp); };
@@ -2963,7 +2963,7 @@
       template<typename _Tp,
 	       bool _Nothrow = noexcept(_S_conv<_Tp>(_S_get())),
 	       typename = decltype(_S_conv<_Tp>(_S_get())),
-#if __has_builtin(__reference_converts_from_temporary)
+#if !defined(NVCC) && __has_builtin(__reference_converts_from_temporary)
 	       bool _Dangle = __reference_converts_from_temporary(_Tp, _Res_t)
 #else
 	       bool _Dangle = false
@@ -3359,8 +3359,10 @@
 #endif
 template <typename _Base, typename _Derived>
   inline constexpr bool is_base_of_v = __is_base_of(_Base, _Derived);
+#ifndef NVCC
 template <typename _From, typename _To>
   inline constexpr bool is_convertible_v = __is_convertible(_From, _To);
+#endif
 template<typename _Fn, typename... _Args>
   inline constexpr bool is_invocable_v = is_invocable<_Fn, _Args...>::value;
 template<typename _Fn, typename... _Args>
